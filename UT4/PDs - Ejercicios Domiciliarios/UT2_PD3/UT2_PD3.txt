#5.4
a) El programa A tiene mejor tiempo de ejecucion que B para una entrada grande (mayor a 10000), 
ya que O(n log n) es mas eficiente que O(n^2). Se observa en la grafica como el orden exponencial es mayor
que el logaritmico incluso en entradas mas chicas.

b) Ident. que A

c) El algoritmo A ya que para N=1000: N log N = 1000 y N^2 = 10000000

d) No

#5.5
a) inicio < fin: Nunca se llega al ultimo elemento del array.

b) medio = inicio + fin / 2: Se estaria dividiendo fin entre 2 y sumando a inicio, no se encontraria la mitad del arreglo
correctamente.

c)inicio = medio: Afectara a la busqueada binaria, ya que incluira unos d elos elementos de la otra mitad

d)fin = medio: Ident. que c

#5.6
a) O(n) porque la suma se hace digito a digito.
b) O(n^2) ya que cada digito del multiplicador se multiplica por todos los digitos del multiplicando
c) O(n) debido que se requiere una division por cada digito del dividendo y una multiplicacion y substraccion
por cada digito del cociente

#5.10
a) (500 / 100) * 0.5 = 2.5 milisegundos
b) 500 * log2(500) / (100 * log2(100)) * 0.5 = 10 milisegundos
c) (500^2 / 100^2) * 0.5 = 12.5 milisegundos
d) (500^3 / 100^3) * 0.5 = 62.5 milisegundos

#5.11
a)(60000ms / 0.5ms) * 100 = 12 000 000
c) (60000ms / 0.5ms^2) * 100 = 24 000 000
d) (60000ms) / 0.5^3) * 100 = 48 000 000

#5.12
N	 |O(N^3)       |O(N^2)  |O(N log N)|O(N)  |
---------|-------------|--------|----------|------|
1.000.000|1.03 billones|7092.90 |437.22	   |3.0711|

#5.13
37 > 2/n > raiz(n) > n log log n > n > n log n > n log n^2 > n log^2 n > n^1.5 > n^2 > n^3 > 2^(n/2), 2^n

#5.14
Fragmento 1) O(n)
Fragmento 2) O(n^2)
Fragmento 3) O(n)
Fragmento 4) O(n^2)
Fragmento 5) O(n^2)
Fragmento 6) O(n^3)

#5.15
O(n^3)

#5.16
a) Multa del d√≠a N = 2^(N-1)
b) O(log E)






